<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.templates.spark</groupId>
    <artifactId>spark-template</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <jdk.version>1.8</jdk.version>
        <scala.compat.version>2.11</scala.compat.version>
        <scala.version>2.11.8</scala.version>
        <spark.version>2.2.0</spark.version>
        <scalatest.version>3.0.4</scalatest.version>
        <postgresql.version>42.2.2</postgresql.version>
        <scopt.version>3.7.1</scopt.version>
        <typesafe.config.version>1.4.1</typesafe.config.version>
        <mockito.scala.version>1.14.8</mockito.scala.version>
        <maven.build.timestamp.format>yyyyMMddHHmm</maven.build.timestamp.format>
        <app.env>dev</app.env>
    </properties>

    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <testSourceDirectory>src/test/scala</testSourceDirectory>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <!-- Enable the scala maven plugin, see https://github.com/davidB/scala-maven-plugin for more info -->
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin used to create an Uber jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>org/datanucleus/**</exclude>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <keepDependenciesWithProvidedScope>false</keepDependenciesWithProvidedScope>
                    <relocations>
                        <relocation>
                            <pattern>org.apache.http</pattern>
                            <shadedPattern>shaded.org.apache.http</shadedPattern>
                        </relocation>
                    </relocations>
                    <artifactSet>
                        <excludes>
                            <exclude>javax.servlet:*</exclude>
                            <exclude>org.apache.hadoop:*</exclude>
                            <exclude>org.apache.maven.plugins:*</exclude>
                            <exclude>org.apache.spark:*</exclude>
                            <exclude>org.apache.avro:*</exclude>
                            <exclude>org.apache.parquet:*</exclude>
                            <exclude>org.scala-lang:*</exclude>
                        </excludes>
                    </artifactSet>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Disable surefire and use scalatest instead -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <skipTests>true</skipTests>
                    <argLine>-Xmx2048m -XX:MaxPermSize=2048m</argLine>
                    <forkCount>1</forkCount>
                </configuration>
            </plugin>
            <!-- Enable scalatest -->
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>1.0</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>WDF TestSuite.txt</filereports>
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/extra-resources</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <includes>
                                        <include>application-placeholder.properties</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                                <resource>
                                    <directory>scripts/templates</directory>
                                    <includes>
                                        <include>initialize.sh</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                                <resource>
                                    <directory>scripts/templates</directory>
                                    <includes>
                                        <include>dt.markdown</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.3</version>
                <executions>
                    <execution>
                        <id>coverage-initialize</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>coverage-report</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!-- Threshold -->
                    <execution>
                        <id>coverage-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>CLASS</element>
                                    <excludes>
                                        <exclude>com.asimio.demo.Application</exclude>
                                    </excludes>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0%</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

    </build>

    <dependencies>
        <!-- Scala dependencies -->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- Spark dependencies -->
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.compat.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Logging -->


        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>
        <!-- Test dependencies -->
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.compat.version}</artifactId>
            <version>${scalatest.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.holdenkarau/spark-testing-base -->
        <dependency>
            <groupId>com.holdenkarau</groupId>
            <artifactId>spark-testing-base_${scala.compat.version}</artifactId>
            <version>2.4.5_0.14.0</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-scala -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-scala_${scala.compat.version}</artifactId>
            <version>${mockito.scala.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Tools -->
        <dependency>
            <groupId>com.github.scopt</groupId>
            <artifactId>scopt_${scala.compat.version}</artifactId>
            <version>${scopt.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.typesafe/config -->
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
            <version>${typesafe.config.version}</version>
        </dependency>


    </dependencies>

    <profiles>
        <profile>
            <id>assembly</id>
            <build>
                <plugins>
                    <!-- Assembly -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.3.0</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <finalName>${project.artifactId}-${project.version}-${app.env}</finalName>
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <descriptors>
                                        <descriptor>src/main/assembly/zip.xml</descriptor>
                                    </descriptors>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>1.9.1</version>
                        <executions>
                            <execution>
                                <id>timestamp-property</id>
                                <goals>
                                    <goal>timestamp-property</goal>
                                </goals>
                                <configuration>
                                    <!-- ${my-timestamp} will be used in version.txt and for rpm release number-->
                                    <name>build.timestamp</name>
                                    <pattern>yyyyMMddHHmm</pattern>
                                    <timeZone>Europe/Paris</timeZone>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>dev</id>
            <properties>
                <app.env>dev</app.env>
                <app.queue_name>GTPS</app.queue_name>
                <app.name>BluebookPid</app.name>
                <workdir>/project/gtps/bib_bluebookpid</workdir>
                <lake.root>/lake</lake.root>
                <jdbc.url>jdbc:postgresql://dbiblx01.dns21.socgen:12400/bib_db</jdbc.url>
                <jdbc.user>bib_db</jdbc.user>
                <jdbc.password>BIB_P@ssword</jdbc.password>
                <jdbc.schema>bib_db</jdbc.schema>
                <jdbc.batch-size>1000</jdbc.batch-size>
                <ref-accounts>/project/gtps/bib_bluebookpid/resources/data/ref_comptes.csv</ref-accounts>
                <ref-currencies>/project/gtps/bib_bluebookpid/resources/data/currencies.csv</ref-currencies>
                <ref-countries>/project/gtps/bib_bluebookpid/resources/data/countries.csv</ref-countries>
                <hive.database-name>project_gtps_bib_bluebookpid</hive.database-name>
            </properties>
        </profile>
        <profile>
            <id>hml</id>
            <properties>
                <app.env>hml</app.env>
                <app.queue_name>GTPSPH</app.queue_name>
                <app.name>BluebookPid</app.name>
                <workdir>/project-h/gtps/bib_bluebookpid</workdir>
                <lake.root>/lake-h</lake.root>
                <jdbc.url>jdbc:postgresql://hbiblx02.dns21.socgen:12400/bib_db</jdbc.url>
                <jdbc.user>bib_db</jdbc.user>
                <jdbc.password>BIB_P@ssword</jdbc.password>
                <jdbc.schema>bib_db</jdbc.schema>
                <jdbc.batch-size>1000</jdbc.batch-size>
                <ref-accounts>/project-h/gtps/bib_bluebookpid/resources/data/ref_comptes.csv</ref-accounts>
                <ref-currencies>/project-h/gtps/bib_bluebookpid/resources/data/currencies.csv</ref-currencies>
                <ref-countries>/project-h/gtps/bib_bluebookpid/resources/data/countries.csv</ref-countries>
                <hive.database-name>project_gtps_bib_bluebookpid</hive.database-name>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <app.env>prod</app.env>
                <app.queue_name>REMP</app.queue_name>
                <app.name>BluebookPid</app.name>
                <workdir>/project/gtps/bib_bluebookpid</workdir>
                <lake.root>/lake</lake.root>
                <jdbc.url>jdbc:postgresql://pbiblx01.dns20.socgen:12400/bib_db</jdbc.url>
                <jdbc.user>bib_db</jdbc.user>
                <jdbc.password>BIB_P@ssword</jdbc.password>
                <jdbc.schema>bib_db</jdbc.schema>
                <jdbc.batch-size>1000</jdbc.batch-size>
                <ref-accounts>/project/gtps/bib_bluebookpid/resources/data/ref_comptes.csv</ref-accounts>
                <ref-currencies>/project/gtps/bib_bluebookpid/resources/data/currencies.csv</ref-currencies>
                <ref-countries>/project/gtps/bib_bluebookpid/resources/data/countries.csv</ref-countries>
                <hive.database-name>project_gtps_bib_bluebookpid</hive.database-name>
            </properties>
        </profile>
    </profiles>
</project>
